
@Component - определяет бин
@Autowired - Dependency Injection
@Qualifier("someBean") задает ID бина которое нужно использовать
@Scope("prototype") - скоп прототайп. По умолчанию singlton

@PostConstruct - метод после создания бина
@PreDestroy - метод перед удалением бина

определяем расположение конфигурации спринга без xml файла
@Configuration
@ComponentScan("org.sevod.springdemo")
AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Config.class);

@Bean - задет бин. Назавние бина соответсвует названию метода.

@PropertySource("classpath:sport.properties") - подключем файл со свойствами

@Value("${foo.email}")
private String email;

---
MVC
---

@Controller - контролер в MVC
@RequestMapping("/") - Анотация, которая перенаправляет входящие запросы на наши ява методы

@RequestParam можно напрямую со спринга данные передавать в форму

@ModelAttribute("student") можно в контролер передавать данные 

	@RequestMapping("/processForm")
	public String processForm(@ModelAttribute("student") Student theStudent) {
		
		return "student-confirmation";
	}

Validation rules (Hibernate?)
@NotNull(message="message for errore")
@Size(min=1, messge="message for errore")
@Valid используется в ...
public String processForm(@Valid @ModelAttribute("customer") Customer theCustomer,
			BindingResult theBindingResult)


@InitBinder препроцесор который пропускает через себя строки

@Min
@Max

@Pattern(regexp="^[a-zA-Z0-9] {5}", message="only 5 chars/digits") - задаем паттерн регулярного выражения


Hibernate
-----------

Обявляем класс который будем использовать в hibernate
@Entity
@Table(name="student")
public class Student {....
student имя таблицы в БД
	
@Id	//- данное поле будет Primery key (разумеется только одно на таблицу)
@Column(name="id")  //наименование колонки в БД
private int id;

//для связи полей разных таблиц
//InstructorDetail это другая таблица
@OneToOne(cascade = CascadeType.ALL)
@JoinColumn(name = "instructor_detail_id")
private InstructorDetail instructorDetail;

//если нужна двунаправленность.
@OneToOne(mappedBy = "instructorDetail", cascade = CascadeType.ALL)
private Instructor instructor;